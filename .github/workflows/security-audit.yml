name: Security Audit & Dependency Management

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  schedule:
    # Run security audit daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch: # Allow manual trigger

env:
  NODE_VERSION: '18.x'
  BACKEND_PATH: 'area25-backend-main/area25-backend-main'
  FRONTEND_PATH: 'area25-main/area25-main/frontend'

jobs:
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest

    strategy:
      matrix:
        project: [backend, frontend]
        include:
          - project: backend
            path: area25-backend-main/area25-backend-main
          - project: frontend
            path: area25-main/area25-main/frontend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ matrix.path }}/package-lock.json

      - name: Install dependencies
        working-directory: ${{ matrix.path }}
        run: npm ci

      - name: Run npm audit
        working-directory: ${{ matrix.path }}
        run: |
          echo "Running npm audit for ${{ matrix.project }}..."
          npm audit --audit-level=moderate --production || true

          # Generate audit report
          npm audit --json --production > audit-report.json || true

          # Count vulnerabilities
          HIGH_VULNS=$(cat audit-report.json | jq '.metadata.vulnerabilities.high // 0')
          CRITICAL_VULNS=$(cat audit-report.json | jq '.metadata.vulnerabilities.critical // 0')

          echo "High vulnerabilities: $HIGH_VULNS"
          echo "Critical vulnerabilities: $CRITICAL_VULNS"

          # Fail if critical vulnerabilities found
          if [ "$CRITICAL_VULNS" -gt 0 ]; then
            echo "❌ Critical vulnerabilities found in ${{ matrix.project }}!"
            exit 1
          fi

          # Warn about high vulnerabilities
          if [ "$HIGH_VULNS" -gt 0 ]; then
            echo "⚠️  High vulnerabilities found in ${{ matrix.project }}. Consider updating dependencies."
          fi

      - name: Check for outdated dependencies
        working-directory: ${{ matrix.path }}
        run: |
          echo "Checking for outdated dependencies in ${{ matrix.project }}..."
          npm outdated --json > outdated-report.json || true

          # Show outdated packages
          if [ -s outdated-report.json ] && [ "$(cat outdated-report.json)" != "{}" ]; then
            echo "📦 Outdated packages found:"
            npm outdated || true
          else
            echo "✅ All dependencies are up to date"
          fi

      - name: License compliance check
        working-directory: ${{ matrix.path }}
        run: |
          # Install license checker
          npx license-checker --summary --production --onlyAllow 'MIT;BSD;Apache-2.0;ISC;BSD-2-Clause;BSD-3-Clause;Apache;Unlicense;WTFPL;CC0-1.0' || true

      - name: Upload audit reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-audit-${{ matrix.project }}
          path: |
            ${{ matrix.path }}/audit-report.json
            ${{ matrix.path }}/outdated-report.json
          retention-days: 30

  codeql-analysis:
    name: CodeQL Security Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      matrix:
        language: ['javascript']

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          queries: security-extended,security-and-quality

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{ matrix.language }}"

  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    permissions:
      contents: read
      pull-requests: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Dependency Review
        uses: actions/dependency-review-action@v4
        with:
          fail-on-severity: high
          allow-ghsas: GHSA-example-1234,GHSA-example-5678
          deny-licenses: GPL-2.0,LGPL-2.0

  secret-scan:
    name: Secret Scanning
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run TruffleHog for secret detection
        uses: trufflesecurity/trufflehog@v3.82.13
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

      - name: Run GitLeaks for additional secret detection
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  dockerfile-security:
    name: Dockerfile Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Find Dockerfiles
        id: dockerfiles
        run: |
          DOCKERFILES=$(find . -name "Dockerfile*" -type f | head -10 | tr '\n' ' ')
          echo "dockerfiles=$DOCKERFILES" >> $GITHUB_OUTPUT
          echo "Found Dockerfiles: $DOCKERFILES"

      - name: Run Hadolint on Dockerfiles
        if: steps.dockerfiles.outputs.dockerfiles != ''
        run: |
          # Install Hadolint
          wget -O hadolint https://github.com/hadolint/hadolint/releases/latest/download/hadolint-Linux-x86_64
          chmod +x hadolint

          # Scan each Dockerfile
          for dockerfile in ${{ steps.dockerfiles.outputs.dockerfiles }}; do
            echo "Scanning $dockerfile..."
            ./hadolint "$dockerfile" || true
          done

  infrastructure-security:
    name: Infrastructure Security
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Run AWS Config compliance check
        run: |
          # Check if AWS Config is enabled
          if aws configservice describe-configuration-recorders --query 'ConfigurationRecorders[0].name' --output text >/dev/null 2>&1; then
            echo "AWS Config is enabled. Checking compliance..."

            # Get compliance summary
            aws configservice get-compliance-summary-by-config-rule || echo "No config rules found"
          else
            echo "AWS Config is not enabled. Consider enabling for compliance monitoring."
          fi

      - name: Check S3 bucket security
        run: |
          # Check S3 bucket public access settings
          if [ -n "${{ secrets.S3_BUCKET_NAME }}" ]; then
            echo "Checking S3 bucket security for: ${{ secrets.S3_BUCKET_NAME }}"

            # Check bucket public access block
            aws s3api get-public-access-block --bucket ${{ secrets.S3_BUCKET_NAME }} || echo "No public access block configured"

            # Check bucket encryption
            aws s3api get-bucket-encryption --bucket ${{ secrets.S3_BUCKET_NAME }} || echo "No encryption configured"

            # Check bucket versioning
            aws s3api get-bucket-versioning --bucket ${{ secrets.S3_BUCKET_NAME }}
          fi

      - name: Check RDS security
        run: |
          # List RDS instances and check security groups
          echo "Checking RDS security configuration..."
          aws rds describe-db-instances --query 'DBInstances[*].[DBInstanceIdentifier,PubliclyAccessible,VpcSecurityGroups[*].VpcSecurityGroupId]' --output table || echo "No RDS instances found"

  create-security-report:
    name: Create Security Report
    runs-on: ubuntu-latest
    needs: [security-audit, codeql-analysis, secret-scan]
    if: always()

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download audit artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: security-audit-*
          merge-multiple: true

      - name: Generate security report
        run: |
          echo "# Security Audit Report" > security-report.md
          echo "Generated on: $(date)" >> security-report.md
          echo "" >> security-report.md

          echo "## Dependency Audit Results" >> security-report.md

          # Process backend audit
          if [ -f audit-report.json ]; then
            echo "### Backend Security Audit" >> security-report.md
            HIGH_VULNS=$(cat audit-report.json | jq '.metadata.vulnerabilities.high // 0')
            CRITICAL_VULNS=$(cat audit-report.json | jq '.metadata.vulnerabilities.critical // 0')
            echo "- High vulnerabilities: $HIGH_VULNS" >> security-report.md
            echo "- Critical vulnerabilities: $CRITICAL_VULNS" >> security-report.md
            echo "" >> security-report.md
          fi

          echo "## Recommendations" >> security-report.md
          echo "1. Regularly update dependencies" >> security-report.md
          echo "2. Review and address security vulnerabilities" >> security-report.md
          echo "3. Enable AWS Config for compliance monitoring" >> security-report.md
          echo "4. Implement proper secret management" >> security-report.md
          echo "5. Regular security audits and penetration testing" >> security-report.md

      - name: Upload security report
        uses: actions/upload-artifact@v4
        with:
          name: security-report
          path: security-report.md
          retention-days: 90

      - name: Comment security report on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            if (fs.existsSync('security-report.md')) {
              const report = fs.readFileSync('security-report.md', 'utf8');
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: '## 🔒 Security Audit Report\n\n' + report
              });
            }